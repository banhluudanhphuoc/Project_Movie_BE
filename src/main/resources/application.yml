spring:
  servlet:
    multipart:
      max-file-size : 10MB
      max-request-size: 10MB
  datasource:
    url: jdbc:mysql://18.142.210.17:6033/group_7
    username: root
    password: my_secret_password
  jpa:
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
    hibernate:
      ddl-auto: none

  messages:
    basename: messageErrors
    fallback-to-system-locale: false
  web:
    locale: vi_VN
    locale-resolver: fixed
  mail:
    default-encoding: UTF-8
    host: smtp.gmail.com
    username: banhdavid26@gmail.com
    password: jbnknqkwkdpdbgwi
    port: 587
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
    protocol: smtp
    test-connection: false
  liquibase:
    change-log: classpath:db/changelog.xml
    enabled: false #false is not use liquibase when no have new design
  jackson:
    deserialization:
      fail-on-unknown-properties: true
  logging:
    level:
      org:
        hibernate: ERROR
  app:
    jwtRefreshExpirationMs: 6000
    jwtExpirationMs: 60000
    jwtSecret: MovieSeven
#    jwtCookieName: bonik
#    jwtRefreshCookieName: bonikRF
    cors:
      allowedOrigins: http://localhost:3000,http://localhost:63342
      # After successfully authenticating with the OAuth2 Provider,
      # we'll be generating an auth token for the user and sending the token to the
      # redirectUri mentioned by the client in the /oauth2/authorize request.
    oauth2:
      authorizedRedirectUris:
        - http://localhost:3000/
        - http://localhost:63342/
#  security:
#    oauth2:
#      client:
#        registration:
#          google:
#            client-id: 496256023815-gfnv445ste0ep1o56qqr2j7ffggbd17s.apps.googleusercontent.com
#            client-secret: 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
#            redirect-uri: "{baseUrl}/oauth2/callback"
#            scope:
#              - email
#              - profile

